// Code generated by MockGen. DO NOT EDIT.
// Source: backend-app/service (interfaces: TodoRepository)

// Package _mocks is a generated GoMock package.
package _mocks

import (
	model "backend-app/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTodoRepository is a mock of TodoRepository interface
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// AddTodoListItemByTitle mocks base method
func (m *MockTodoRepository) AddTodoListItemByTitle(arg0 string) (model.TodoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTodoListItemByTitle", arg0)
	ret0, _ := ret[0].(model.TodoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTodoListItemByTitle indicates an expected call of AddTodoListItemByTitle
func (mr *MockTodoRepositoryMockRecorder) AddTodoListItemByTitle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTodoListItemByTitle", reflect.TypeOf((*MockTodoRepository)(nil).AddTodoListItemByTitle), arg0)
}

// DeleteTodoItemByID mocks base method
func (m *MockTodoRepository) DeleteTodoItemByID(arg0 int) (model.TodoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodoItemByID", arg0)
	ret0, _ := ret[0].(model.TodoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTodoItemByID indicates an expected call of DeleteTodoItemByID
func (mr *MockTodoRepositoryMockRecorder) DeleteTodoItemByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodoItemByID", reflect.TypeOf((*MockTodoRepository)(nil).DeleteTodoItemByID), arg0)
}

// GetTodoListItems mocks base method
func (m *MockTodoRepository) GetTodoListItems() ([]model.TodoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoListItems")
	ret0, _ := ret[0].([]model.TodoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoListItems indicates an expected call of GetTodoListItems
func (mr *MockTodoRepositoryMockRecorder) GetTodoListItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoListItems", reflect.TypeOf((*MockTodoRepository)(nil).GetTodoListItems))
}

// UpdateTodoListItem mocks base method
func (m *MockTodoRepository) UpdateTodoListItem(arg0 int, arg1 bool) (model.TodoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoListItem", arg0, arg1)
	ret0, _ := ret[0].(model.TodoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodoListItem indicates an expected call of UpdateTodoListItem
func (mr *MockTodoRepositoryMockRecorder) UpdateTodoListItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoListItem", reflect.TypeOf((*MockTodoRepository)(nil).UpdateTodoListItem), arg0, arg1)
}
